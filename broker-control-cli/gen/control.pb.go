// Code generated by protoc-gen-go. DO NOT EDIT.
// source: control.proto

package erebus

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ControlMessage_SubscribeClientControllersMessage_EventType int32

const (
	ControlMessage_SubscribeClientControllersMessage_UNKNOWN ControlMessage_SubscribeClientControllersMessage_EventType = 0
	ControlMessage_SubscribeClientControllersMessage_JOINED  ControlMessage_SubscribeClientControllersMessage_EventType = 1
	ControlMessage_SubscribeClientControllersMessage_PARTED  ControlMessage_SubscribeClientControllersMessage_EventType = 2
)

var ControlMessage_SubscribeClientControllersMessage_EventType_name = map[int32]string{
	0: "UNKNOWN",
	1: "JOINED",
	2: "PARTED",
}

var ControlMessage_SubscribeClientControllersMessage_EventType_value = map[string]int32{
	"UNKNOWN": 0,
	"JOINED":  1,
	"PARTED":  2,
}

func (x ControlMessage_SubscribeClientControllersMessage_EventType) String() string {
	return proto.EnumName(ControlMessage_SubscribeClientControllersMessage_EventType_name, int32(x))
}

func (ControlMessage_SubscribeClientControllersMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 2, 0}
}

type ControlMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessage) Reset()         { *m = ControlMessage{} }
func (m *ControlMessage) String() string { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()    {}
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0}
}

func (m *ControlMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage.Unmarshal(m, b)
}
func (m *ControlMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage.Marshal(b, m, deterministic)
}
func (m *ControlMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage.Merge(m, src)
}
func (m *ControlMessage) XXX_Size() int {
	return xxx_messageInfo_ControlMessage.Size(m)
}
func (m *ControlMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage proto.InternalMessageInfo

type ControlMessage_GetRobotsResponse struct {
	RobotNames           []string `protobuf:"bytes,1,rep,name=robotNames,proto3" json:"robotNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessage_GetRobotsResponse) Reset()         { *m = ControlMessage_GetRobotsResponse{} }
func (m *ControlMessage_GetRobotsResponse) String() string { return proto.CompactTextString(m) }
func (*ControlMessage_GetRobotsResponse) ProtoMessage()    {}
func (*ControlMessage_GetRobotsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 0}
}

func (m *ControlMessage_GetRobotsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_GetRobotsResponse.Unmarshal(m, b)
}
func (m *ControlMessage_GetRobotsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_GetRobotsResponse.Marshal(b, m, deterministic)
}
func (m *ControlMessage_GetRobotsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_GetRobotsResponse.Merge(m, src)
}
func (m *ControlMessage_GetRobotsResponse) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_GetRobotsResponse.Size(m)
}
func (m *ControlMessage_GetRobotsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_GetRobotsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_GetRobotsResponse proto.InternalMessageInfo

func (m *ControlMessage_GetRobotsResponse) GetRobotNames() []string {
	if m != nil {
		return m.RobotNames
	}
	return nil
}

type ControlMessage_GetClientControllersResponse struct {
	ControllerNames      []string `protobuf:"bytes,1,rep,name=controllerNames,proto3" json:"controllerNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessage_GetClientControllersResponse) Reset() {
	*m = ControlMessage_GetClientControllersResponse{}
}
func (m *ControlMessage_GetClientControllersResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ControlMessage_GetClientControllersResponse) ProtoMessage() {}
func (*ControlMessage_GetClientControllersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 1}
}

func (m *ControlMessage_GetClientControllersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_GetClientControllersResponse.Unmarshal(m, b)
}
func (m *ControlMessage_GetClientControllersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_GetClientControllersResponse.Marshal(b, m, deterministic)
}
func (m *ControlMessage_GetClientControllersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_GetClientControllersResponse.Merge(m, src)
}
func (m *ControlMessage_GetClientControllersResponse) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_GetClientControllersResponse.Size(m)
}
func (m *ControlMessage_GetClientControllersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_GetClientControllersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_GetClientControllersResponse proto.InternalMessageInfo

func (m *ControlMessage_GetClientControllersResponse) GetControllerNames() []string {
	if m != nil {
		return m.ControllerNames
	}
	return nil
}

type ControlMessage_SubscribeClientControllersMessage struct {
	EventType            ControlMessage_SubscribeClientControllersMessage_EventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=erebus.ControlMessage_SubscribeClientControllersMessage_EventType" json:"eventType,omitempty"`
	ControllerName       string                                                     `protobuf:"bytes,2,opt,name=controllerName,proto3" json:"controllerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *ControlMessage_SubscribeClientControllersMessage) Reset() {
	*m = ControlMessage_SubscribeClientControllersMessage{}
}
func (m *ControlMessage_SubscribeClientControllersMessage) String() string {
	return proto.CompactTextString(m)
}
func (*ControlMessage_SubscribeClientControllersMessage) ProtoMessage() {}
func (*ControlMessage_SubscribeClientControllersMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 2}
}

func (m *ControlMessage_SubscribeClientControllersMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_SubscribeClientControllersMessage.Unmarshal(m, b)
}
func (m *ControlMessage_SubscribeClientControllersMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_SubscribeClientControllersMessage.Marshal(b, m, deterministic)
}
func (m *ControlMessage_SubscribeClientControllersMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_SubscribeClientControllersMessage.Merge(m, src)
}
func (m *ControlMessage_SubscribeClientControllersMessage) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_SubscribeClientControllersMessage.Size(m)
}
func (m *ControlMessage_SubscribeClientControllersMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_SubscribeClientControllersMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_SubscribeClientControllersMessage proto.InternalMessageInfo

func (m *ControlMessage_SubscribeClientControllersMessage) GetEventType() ControlMessage_SubscribeClientControllersMessage_EventType {
	if m != nil {
		return m.EventType
	}
	return ControlMessage_SubscribeClientControllersMessage_UNKNOWN
}

func (m *ControlMessage_SubscribeClientControllersMessage) GetControllerName() string {
	if m != nil {
		return m.ControllerName
	}
	return ""
}

type ControlMessage_ConnectClientToRobotRequest struct {
	ClientName           string   `protobuf:"bytes,1,opt,name=clientName,proto3" json:"clientName,omitempty"`
	RobotName            string   `protobuf:"bytes,2,opt,name=robotName,proto3" json:"robotName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessage_ConnectClientToRobotRequest) Reset() {
	*m = ControlMessage_ConnectClientToRobotRequest{}
}
func (m *ControlMessage_ConnectClientToRobotRequest) String() string {
	return proto.CompactTextString(m)
}
func (*ControlMessage_ConnectClientToRobotRequest) ProtoMessage() {}
func (*ControlMessage_ConnectClientToRobotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 3}
}

func (m *ControlMessage_ConnectClientToRobotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotRequest.Unmarshal(m, b)
}
func (m *ControlMessage_ConnectClientToRobotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotRequest.Marshal(b, m, deterministic)
}
func (m *ControlMessage_ConnectClientToRobotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_ConnectClientToRobotRequest.Merge(m, src)
}
func (m *ControlMessage_ConnectClientToRobotRequest) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotRequest.Size(m)
}
func (m *ControlMessage_ConnectClientToRobotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_ConnectClientToRobotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_ConnectClientToRobotRequest proto.InternalMessageInfo

func (m *ControlMessage_ConnectClientToRobotRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ControlMessage_ConnectClientToRobotRequest) GetRobotName() string {
	if m != nil {
		return m.RobotName
	}
	return ""
}

type ControlMessage_ConnectClientToRobotResponse struct {
	// Types that are valid to be assigned to Data:
	//	*ControlMessage_ConnectClientToRobotResponse_Error
	//	*ControlMessage_ConnectClientToRobotResponse_Ok_
	Data                 isControlMessage_ConnectClientToRobotResponse_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ControlMessage_ConnectClientToRobotResponse) Reset() {
	*m = ControlMessage_ConnectClientToRobotResponse{}
}
func (m *ControlMessage_ConnectClientToRobotResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ControlMessage_ConnectClientToRobotResponse) ProtoMessage() {}
func (*ControlMessage_ConnectClientToRobotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 4}
}

func (m *ControlMessage_ConnectClientToRobotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse.Unmarshal(m, b)
}
func (m *ControlMessage_ConnectClientToRobotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse.Marshal(b, m, deterministic)
}
func (m *ControlMessage_ConnectClientToRobotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse.Merge(m, src)
}
func (m *ControlMessage_ConnectClientToRobotResponse) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse.Size(m)
}
func (m *ControlMessage_ConnectClientToRobotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse proto.InternalMessageInfo

type isControlMessage_ConnectClientToRobotResponse_Data interface {
	isControlMessage_ConnectClientToRobotResponse_Data()
}

type ControlMessage_ConnectClientToRobotResponse_Error struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ControlMessage_ConnectClientToRobotResponse_Ok_ struct {
	Ok *ControlMessage_ConnectClientToRobotResponse_Ok `protobuf:"bytes,2,opt,name=ok,proto3,oneof"`
}

func (*ControlMessage_ConnectClientToRobotResponse_Error) isControlMessage_ConnectClientToRobotResponse_Data() {
}

func (*ControlMessage_ConnectClientToRobotResponse_Ok_) isControlMessage_ConnectClientToRobotResponse_Data() {
}

func (m *ControlMessage_ConnectClientToRobotResponse) GetData() isControlMessage_ConnectClientToRobotResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ControlMessage_ConnectClientToRobotResponse) GetError() string {
	if x, ok := m.GetData().(*ControlMessage_ConnectClientToRobotResponse_Error); ok {
		return x.Error
	}
	return ""
}

func (m *ControlMessage_ConnectClientToRobotResponse) GetOk() *ControlMessage_ConnectClientToRobotResponse_Ok {
	if x, ok := m.GetData().(*ControlMessage_ConnectClientToRobotResponse_Ok_); ok {
		return x.Ok
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControlMessage_ConnectClientToRobotResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControlMessage_ConnectClientToRobotResponse_Error)(nil),
		(*ControlMessage_ConnectClientToRobotResponse_Ok_)(nil),
	}
}

type ControlMessage_ConnectClientToRobotResponse_Ok struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessage_ConnectClientToRobotResponse_Ok) Reset() {
	*m = ControlMessage_ConnectClientToRobotResponse_Ok{}
}
func (m *ControlMessage_ConnectClientToRobotResponse_Ok) String() string {
	return proto.CompactTextString(m)
}
func (*ControlMessage_ConnectClientToRobotResponse_Ok) ProtoMessage() {}
func (*ControlMessage_ConnectClientToRobotResponse_Ok) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 4, 0}
}

func (m *ControlMessage_ConnectClientToRobotResponse_Ok) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse_Ok.Unmarshal(m, b)
}
func (m *ControlMessage_ConnectClientToRobotResponse_Ok) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse_Ok.Marshal(b, m, deterministic)
}
func (m *ControlMessage_ConnectClientToRobotResponse_Ok) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse_Ok.Merge(m, src)
}
func (m *ControlMessage_ConnectClientToRobotResponse_Ok) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse_Ok.Size(m)
}
func (m *ControlMessage_ConnectClientToRobotResponse_Ok) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse_Ok.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_ConnectClientToRobotResponse_Ok proto.InternalMessageInfo

type ControlMessage_DisconnectClientFromRobotRequest struct {
	ClientName           string   `protobuf:"bytes,1,opt,name=clientName,proto3" json:"clientName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessage_DisconnectClientFromRobotRequest) Reset() {
	*m = ControlMessage_DisconnectClientFromRobotRequest{}
}
func (m *ControlMessage_DisconnectClientFromRobotRequest) String() string {
	return proto.CompactTextString(m)
}
func (*ControlMessage_DisconnectClientFromRobotRequest) ProtoMessage() {}
func (*ControlMessage_DisconnectClientFromRobotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 5}
}

func (m *ControlMessage_DisconnectClientFromRobotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotRequest.Unmarshal(m, b)
}
func (m *ControlMessage_DisconnectClientFromRobotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotRequest.Marshal(b, m, deterministic)
}
func (m *ControlMessage_DisconnectClientFromRobotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_DisconnectClientFromRobotRequest.Merge(m, src)
}
func (m *ControlMessage_DisconnectClientFromRobotRequest) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotRequest.Size(m)
}
func (m *ControlMessage_DisconnectClientFromRobotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_DisconnectClientFromRobotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_DisconnectClientFromRobotRequest proto.InternalMessageInfo

func (m *ControlMessage_DisconnectClientFromRobotRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

type ControlMessage_DisconnectClientFromRobotResponse struct {
	// Types that are valid to be assigned to Data:
	//	*ControlMessage_DisconnectClientFromRobotResponse_Error
	//	*ControlMessage_DisconnectClientFromRobotResponse_Ok_
	Data                 isControlMessage_DisconnectClientFromRobotResponse_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *ControlMessage_DisconnectClientFromRobotResponse) Reset() {
	*m = ControlMessage_DisconnectClientFromRobotResponse{}
}
func (m *ControlMessage_DisconnectClientFromRobotResponse) String() string {
	return proto.CompactTextString(m)
}
func (*ControlMessage_DisconnectClientFromRobotResponse) ProtoMessage() {}
func (*ControlMessage_DisconnectClientFromRobotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 6}
}

func (m *ControlMessage_DisconnectClientFromRobotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse.Unmarshal(m, b)
}
func (m *ControlMessage_DisconnectClientFromRobotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse.Marshal(b, m, deterministic)
}
func (m *ControlMessage_DisconnectClientFromRobotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse.Merge(m, src)
}
func (m *ControlMessage_DisconnectClientFromRobotResponse) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse.Size(m)
}
func (m *ControlMessage_DisconnectClientFromRobotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse proto.InternalMessageInfo

type isControlMessage_DisconnectClientFromRobotResponse_Data interface {
	isControlMessage_DisconnectClientFromRobotResponse_Data()
}

type ControlMessage_DisconnectClientFromRobotResponse_Error struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ControlMessage_DisconnectClientFromRobotResponse_Ok_ struct {
	Ok *ControlMessage_DisconnectClientFromRobotResponse_Ok `protobuf:"bytes,2,opt,name=ok,proto3,oneof"`
}

func (*ControlMessage_DisconnectClientFromRobotResponse_Error) isControlMessage_DisconnectClientFromRobotResponse_Data() {
}

func (*ControlMessage_DisconnectClientFromRobotResponse_Ok_) isControlMessage_DisconnectClientFromRobotResponse_Data() {
}

func (m *ControlMessage_DisconnectClientFromRobotResponse) GetData() isControlMessage_DisconnectClientFromRobotResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ControlMessage_DisconnectClientFromRobotResponse) GetError() string {
	if x, ok := m.GetData().(*ControlMessage_DisconnectClientFromRobotResponse_Error); ok {
		return x.Error
	}
	return ""
}

func (m *ControlMessage_DisconnectClientFromRobotResponse) GetOk() *ControlMessage_DisconnectClientFromRobotResponse_Ok {
	if x, ok := m.GetData().(*ControlMessage_DisconnectClientFromRobotResponse_Ok_); ok {
		return x.Ok
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControlMessage_DisconnectClientFromRobotResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControlMessage_DisconnectClientFromRobotResponse_Error)(nil),
		(*ControlMessage_DisconnectClientFromRobotResponse_Ok_)(nil),
	}
}

type ControlMessage_DisconnectClientFromRobotResponse_Ok struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessage_DisconnectClientFromRobotResponse_Ok) Reset() {
	*m = ControlMessage_DisconnectClientFromRobotResponse_Ok{}
}
func (m *ControlMessage_DisconnectClientFromRobotResponse_Ok) String() string {
	return proto.CompactTextString(m)
}
func (*ControlMessage_DisconnectClientFromRobotResponse_Ok) ProtoMessage() {}
func (*ControlMessage_DisconnectClientFromRobotResponse_Ok) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0, 6, 0}
}

func (m *ControlMessage_DisconnectClientFromRobotResponse_Ok) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse_Ok.Unmarshal(m, b)
}
func (m *ControlMessage_DisconnectClientFromRobotResponse_Ok) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse_Ok.Marshal(b, m, deterministic)
}
func (m *ControlMessage_DisconnectClientFromRobotResponse_Ok) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse_Ok.Merge(m, src)
}
func (m *ControlMessage_DisconnectClientFromRobotResponse_Ok) XXX_Size() int {
	return xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse_Ok.Size(m)
}
func (m *ControlMessage_DisconnectClientFromRobotResponse_Ok) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse_Ok.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessage_DisconnectClientFromRobotResponse_Ok proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("erebus.ControlMessage_SubscribeClientControllersMessage_EventType", ControlMessage_SubscribeClientControllersMessage_EventType_name, ControlMessage_SubscribeClientControllersMessage_EventType_value)
	proto.RegisterType((*ControlMessage)(nil), "erebus.ControlMessage")
	proto.RegisterType((*ControlMessage_GetRobotsResponse)(nil), "erebus.ControlMessage.GetRobotsResponse")
	proto.RegisterType((*ControlMessage_GetClientControllersResponse)(nil), "erebus.ControlMessage.GetClientControllersResponse")
	proto.RegisterType((*ControlMessage_SubscribeClientControllersMessage)(nil), "erebus.ControlMessage.SubscribeClientControllersMessage")
	proto.RegisterType((*ControlMessage_ConnectClientToRobotRequest)(nil), "erebus.ControlMessage.ConnectClientToRobotRequest")
	proto.RegisterType((*ControlMessage_ConnectClientToRobotResponse)(nil), "erebus.ControlMessage.ConnectClientToRobotResponse")
	proto.RegisterType((*ControlMessage_ConnectClientToRobotResponse_Ok)(nil), "erebus.ControlMessage.ConnectClientToRobotResponse.Ok")
	proto.RegisterType((*ControlMessage_DisconnectClientFromRobotRequest)(nil), "erebus.ControlMessage.DisconnectClientFromRobotRequest")
	proto.RegisterType((*ControlMessage_DisconnectClientFromRobotResponse)(nil), "erebus.ControlMessage.DisconnectClientFromRobotResponse")
	proto.RegisterType((*ControlMessage_DisconnectClientFromRobotResponse_Ok)(nil), "erebus.ControlMessage.DisconnectClientFromRobotResponse.Ok")
}

func init() { proto.RegisterFile("control.proto", fileDescriptor_0c5120591600887d) }

var fileDescriptor_0c5120591600887d = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xdf, 0x8e, 0xd2, 0x4e,
	0x14, 0xc7, 0x19, 0x7e, 0xbb, 0x6c, 0x7a, 0xf8, 0x89, 0x38, 0xd9, 0x18, 0x1c, 0x89, 0x61, 0xf7,
	0xc2, 0xf4, 0xaa, 0xd9, 0x80, 0xd1, 0x4d, 0x4c, 0x4c, 0xe4, 0x8f, 0xa0, 0x66, 0x8b, 0x29, 0x18,
	0x63, 0xbc, 0xb1, 0xd4, 0x13, 0x6d, 0x28, 0x1d, 0x9c, 0x99, 0x9a, 0xec, 0x95, 0x6f, 0xb0, 0xd7,
	0x3e, 0x8d, 0xef, 0xe0, 0x13, 0xf8, 0x2a, 0x86, 0xb6, 0x94, 0x52, 0x28, 0x84, 0xbd, 0x6b, 0xbf,
	0x70, 0x3e, 0xdf, 0x39, 0x67, 0xce, 0x37, 0x85, 0x3b, 0x0e, 0xf7, 0x95, 0xe0, 0x9e, 0x31, 0x17,
	0x5c, 0x71, 0x5a, 0x42, 0x81, 0x93, 0x40, 0xb2, 0xb2, 0xba, 0x9e, 0xa3, 0x8c, 0x44, 0xa6, 0x49,
	0x77, 0x16, 0x3d, 0x9e, 0xff, 0x2e, 0x41, 0xa5, 0x13, 0x55, 0x5c, 0xa1, 0x94, 0xf6, 0x57, 0x64,
	0x2d, 0xb8, 0xd7, 0x47, 0x65, 0xf1, 0x09, 0x57, 0xd2, 0x42, 0x39, 0xe7, 0xbe, 0x44, 0xfa, 0x08,
	0x40, 0x2c, 0x14, 0xd3, 0x9e, 0xa1, 0xac, 0x91, 0xc6, 0x7f, 0xba, 0x66, 0xa5, 0x14, 0x36, 0x80,
	0x7a, 0x1f, 0x55, 0xc7, 0x73, 0xd1, 0x57, 0x31, 0xcf, 0x43, 0xb1, 0xaa, 0xd7, 0xe1, 0xae, 0x93,
	0xc8, 0x69, 0x48, 0x56, 0x66, 0x7f, 0x09, 0x9c, 0x8d, 0x82, 0x89, 0x74, 0x84, 0x3b, 0xc1, 0x0d,
	0x60, 0x7c, 0x48, 0xfa, 0x19, 0x34, 0xfc, 0x81, 0xbe, 0x1a, 0x5f, 0xcf, 0xb1, 0x46, 0x1a, 0x44,
	0xaf, 0x34, 0xdb, 0x46, 0xd4, 0xab, 0xb1, 0xde, 0x8f, 0xb1, 0x17, 0x66, 0xf4, 0x96, 0x24, 0x6b,
	0x05, 0xa5, 0x8f, 0xa1, 0xb2, 0x7e, 0xb4, 0x5a, 0xb1, 0x41, 0x74, 0xcd, 0xca, 0xa8, 0xe7, 0x17,
	0xa0, 0x25, 0xf5, 0xb4, 0x0c, 0x27, 0xef, 0xcd, 0xb7, 0xe6, 0xf0, 0x83, 0x59, 0x2d, 0x50, 0x80,
	0xd2, 0x9b, 0xe1, 0x6b, 0xb3, 0xd7, 0xad, 0x92, 0xc5, 0xf3, 0xbb, 0x97, 0xd6, 0xb8, 0xd7, 0xad,
	0x16, 0xd9, 0x27, 0x78, 0xd8, 0xe1, 0xbe, 0x8f, 0x4e, 0x3c, 0xaf, 0x31, 0x0f, 0x87, 0x6d, 0xe1,
	0xf7, 0x00, 0xa5, 0x5a, 0x8c, 0xda, 0x09, 0xf5, 0xd0, 0x94, 0x84, 0xa6, 0x29, 0x85, 0xd6, 0x41,
	0x4b, 0x06, 0x1f, 0x9f, 0x69, 0x25, 0xb0, 0x1b, 0x02, 0xf5, 0xed, 0xf4, 0xf8, 0x26, 0xee, 0xc3,
	0x31, 0x0a, 0xc1, 0x45, 0x44, 0x1e, 0x14, 0xac, 0xe8, 0x95, 0x0e, 0xa0, 0xc8, 0xa7, 0x21, 0xaf,
	0xdc, 0x7c, 0x9a, 0x33, 0xca, 0x5d, 0x60, 0x63, 0x38, 0x1d, 0x14, 0xac, 0x22, 0x9f, 0xb2, 0x23,
	0x28, 0x0e, 0xa7, 0xed, 0x12, 0x1c, 0x7d, 0xb1, 0x95, 0xcd, 0xda, 0xd0, 0xe8, 0xba, 0xd2, 0x49,
	0x57, 0xbe, 0x12, 0x7c, 0x76, 0x48, 0xcb, 0xec, 0x17, 0x81, 0xb3, 0x1d, 0x90, 0x3d, 0x9d, 0x5d,
	0xa5, 0x3a, 0x7b, 0x9e, 0xd3, 0xd9, 0x5e, 0x7a, 0x4e, 0x7b, 0xcd, 0x3f, 0xc7, 0x70, 0x12, 0xb3,
	0x68, 0x07, 0xb4, 0x24, 0x39, 0xf4, 0xff, 0xa5, 0x93, 0x19, 0x78, 0x1e, 0xd3, 0x73, 0x7c, 0x37,
	0x93, 0xf6, 0x11, 0x4e, 0xb7, 0x25, 0x29, 0xc3, 0x6b, 0xe5, 0xf3, 0xf2, 0x43, 0xf8, 0x0d, 0x58,
	0x7e, 0x18, 0x32, 0x06, 0x97, 0xb7, 0x4d, 0x93, 0x4e, 0x2e, 0x08, 0x7d, 0x02, 0xb4, 0x8f, 0x6a,
	0xe4, 0xce, 0x02, 0xcf, 0x56, 0x2e, 0xf7, 0x47, 0xca, 0x56, 0x98, 0x71, 0xa8, 0x2e, 0xdf, 0x46,
	0xee, 0x2c, 0xfa, 0xfd, 0x05, 0xd4, 0x12, 0xfc, 0x81, 0xb5, 0x4b, 0xd7, 0xd1, 0xa6, 0xeb, 0xc6,
	0x7f, 0xd9, 0x1a, 0x8b, 0xfe, 0x84, 0xd3, 0x6d, 0x7b, 0x4d, 0x9b, 0x07, 0x85, 0x20, 0x5c, 0xe4,
	0xdc, 0x6b, 0xd9, 0x99, 0xc8, 0x1b, 0x02, 0x0f, 0x72, 0xf7, 0x8f, 0x3e, 0x3b, 0x7c, 0x63, 0xa3,
	0xb3, 0x5c, 0xde, 0x76, 0xd5, 0x27, 0xa5, 0xf0, 0xdb, 0xd0, 0xfa, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xf9, 0x39, 0xff, 0x6d, 0x4c, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlClient interface {
	GetRobots(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ControlMessage_GetRobotsResponse, error)
	GetClientControllers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ControlMessage_GetClientControllersResponse, error)
	SubscribeClientControllers(ctx context.Context, opts ...grpc.CallOption) (Control_SubscribeClientControllersClient, error)
	GetSimulationState(ctx context.Context, in *Null, opts ...grpc.CallOption) (*SimState, error)
	SubscribeSimulationState(ctx context.Context, opts ...grpc.CallOption) (Control_SubscribeSimulationStateClient, error)
	SetSimulationState(ctx context.Context, in *SimState, opts ...grpc.CallOption) (*Null, error)
	ConnectClientToRobot(ctx context.Context, in *ControlMessage_ConnectClientToRobotRequest, opts ...grpc.CallOption) (*ControlMessage_ConnectClientToRobotResponse, error)
	DisconnectClientFromRobot(ctx context.Context, in *ControlMessage_DisconnectClientFromRobotRequest, opts ...grpc.CallOption) (*ControlMessage_DisconnectClientFromRobotResponse, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) GetRobots(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ControlMessage_GetRobotsResponse, error) {
	out := new(ControlMessage_GetRobotsResponse)
	err := c.cc.Invoke(ctx, "/erebus.Control/GetRobots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetClientControllers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ControlMessage_GetClientControllersResponse, error) {
	out := new(ControlMessage_GetClientControllersResponse)
	err := c.cc.Invoke(ctx, "/erebus.Control/GetClientControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) SubscribeClientControllers(ctx context.Context, opts ...grpc.CallOption) (Control_SubscribeClientControllersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Control_serviceDesc.Streams[0], "/erebus.Control/SubscribeClientControllers", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlSubscribeClientControllersClient{stream}
	return x, nil
}

type Control_SubscribeClientControllersClient interface {
	Send(*Null) error
	Recv() (*ControlMessage_SubscribeClientControllersMessage, error)
	grpc.ClientStream
}

type controlSubscribeClientControllersClient struct {
	grpc.ClientStream
}

func (x *controlSubscribeClientControllersClient) Send(m *Null) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlSubscribeClientControllersClient) Recv() (*ControlMessage_SubscribeClientControllersMessage, error) {
	m := new(ControlMessage_SubscribeClientControllersMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlClient) GetSimulationState(ctx context.Context, in *Null, opts ...grpc.CallOption) (*SimState, error) {
	out := new(SimState)
	err := c.cc.Invoke(ctx, "/erebus.Control/GetSimulationState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) SubscribeSimulationState(ctx context.Context, opts ...grpc.CallOption) (Control_SubscribeSimulationStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Control_serviceDesc.Streams[1], "/erebus.Control/SubscribeSimulationState", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlSubscribeSimulationStateClient{stream}
	return x, nil
}

type Control_SubscribeSimulationStateClient interface {
	Send(*Null) error
	Recv() (*SimState, error)
	grpc.ClientStream
}

type controlSubscribeSimulationStateClient struct {
	grpc.ClientStream
}

func (x *controlSubscribeSimulationStateClient) Send(m *Null) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlSubscribeSimulationStateClient) Recv() (*SimState, error) {
	m := new(SimState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlClient) SetSimulationState(ctx context.Context, in *SimState, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/erebus.Control/SetSimulationState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) ConnectClientToRobot(ctx context.Context, in *ControlMessage_ConnectClientToRobotRequest, opts ...grpc.CallOption) (*ControlMessage_ConnectClientToRobotResponse, error) {
	out := new(ControlMessage_ConnectClientToRobotResponse)
	err := c.cc.Invoke(ctx, "/erebus.Control/ConnectClientToRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) DisconnectClientFromRobot(ctx context.Context, in *ControlMessage_DisconnectClientFromRobotRequest, opts ...grpc.CallOption) (*ControlMessage_DisconnectClientFromRobotResponse, error) {
	out := new(ControlMessage_DisconnectClientFromRobotResponse)
	err := c.cc.Invoke(ctx, "/erebus.Control/DisconnectClientFromRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
type ControlServer interface {
	GetRobots(context.Context, *Null) (*ControlMessage_GetRobotsResponse, error)
	GetClientControllers(context.Context, *Null) (*ControlMessage_GetClientControllersResponse, error)
	SubscribeClientControllers(Control_SubscribeClientControllersServer) error
	GetSimulationState(context.Context, *Null) (*SimState, error)
	SubscribeSimulationState(Control_SubscribeSimulationStateServer) error
	SetSimulationState(context.Context, *SimState) (*Null, error)
	ConnectClientToRobot(context.Context, *ControlMessage_ConnectClientToRobotRequest) (*ControlMessage_ConnectClientToRobotResponse, error)
	DisconnectClientFromRobot(context.Context, *ControlMessage_DisconnectClientFromRobotRequest) (*ControlMessage_DisconnectClientFromRobotResponse, error)
}

// UnimplementedControlServer can be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (*UnimplementedControlServer) GetRobots(ctx context.Context, req *Null) (*ControlMessage_GetRobotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRobots not implemented")
}
func (*UnimplementedControlServer) GetClientControllers(ctx context.Context, req *Null) (*ControlMessage_GetClientControllersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientControllers not implemented")
}
func (*UnimplementedControlServer) SubscribeClientControllers(srv Control_SubscribeClientControllersServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeClientControllers not implemented")
}
func (*UnimplementedControlServer) GetSimulationState(ctx context.Context, req *Null) (*SimState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimulationState not implemented")
}
func (*UnimplementedControlServer) SubscribeSimulationState(srv Control_SubscribeSimulationStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSimulationState not implemented")
}
func (*UnimplementedControlServer) SetSimulationState(ctx context.Context, req *SimState) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSimulationState not implemented")
}
func (*UnimplementedControlServer) ConnectClientToRobot(ctx context.Context, req *ControlMessage_ConnectClientToRobotRequest) (*ControlMessage_ConnectClientToRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectClientToRobot not implemented")
}
func (*UnimplementedControlServer) DisconnectClientFromRobot(ctx context.Context, req *ControlMessage_DisconnectClientFromRobotRequest) (*ControlMessage_DisconnectClientFromRobotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectClientFromRobot not implemented")
}

func RegisterControlServer(s *grpc.Server, srv ControlServer) {
	s.RegisterService(&_Control_serviceDesc, srv)
}

func _Control_GetRobots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetRobots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erebus.Control/GetRobots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetRobots(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetClientControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetClientControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erebus.Control/GetClientControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetClientControllers(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_SubscribeClientControllers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServer).SubscribeClientControllers(&controlSubscribeClientControllersServer{stream})
}

type Control_SubscribeClientControllersServer interface {
	Send(*ControlMessage_SubscribeClientControllersMessage) error
	Recv() (*Null, error)
	grpc.ServerStream
}

type controlSubscribeClientControllersServer struct {
	grpc.ServerStream
}

func (x *controlSubscribeClientControllersServer) Send(m *ControlMessage_SubscribeClientControllersMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlSubscribeClientControllersServer) Recv() (*Null, error) {
	m := new(Null)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Control_GetSimulationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetSimulationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erebus.Control/GetSimulationState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetSimulationState(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_SubscribeSimulationState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServer).SubscribeSimulationState(&controlSubscribeSimulationStateServer{stream})
}

type Control_SubscribeSimulationStateServer interface {
	Send(*SimState) error
	Recv() (*Null, error)
	grpc.ServerStream
}

type controlSubscribeSimulationStateServer struct {
	grpc.ServerStream
}

func (x *controlSubscribeSimulationStateServer) Send(m *SimState) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlSubscribeSimulationStateServer) Recv() (*Null, error) {
	m := new(Null)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Control_SetSimulationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).SetSimulationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erebus.Control/SetSimulationState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).SetSimulationState(ctx, req.(*SimState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_ConnectClientToRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlMessage_ConnectClientToRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).ConnectClientToRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erebus.Control/ConnectClientToRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).ConnectClientToRobot(ctx, req.(*ControlMessage_ConnectClientToRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_DisconnectClientFromRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlMessage_DisconnectClientFromRobotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DisconnectClientFromRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erebus.Control/DisconnectClientFromRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DisconnectClientFromRobot(ctx, req.(*ControlMessage_DisconnectClientFromRobotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Control_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erebus.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRobots",
			Handler:    _Control_GetRobots_Handler,
		},
		{
			MethodName: "GetClientControllers",
			Handler:    _Control_GetClientControllers_Handler,
		},
		{
			MethodName: "GetSimulationState",
			Handler:    _Control_GetSimulationState_Handler,
		},
		{
			MethodName: "SetSimulationState",
			Handler:    _Control_SetSimulationState_Handler,
		},
		{
			MethodName: "ConnectClientToRobot",
			Handler:    _Control_ConnectClientToRobot_Handler,
		},
		{
			MethodName: "DisconnectClientFromRobot",
			Handler:    _Control_DisconnectClientFromRobot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeClientControllers",
			Handler:       _Control_SubscribeClientControllers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeSimulationState",
			Handler:       _Control_SubscribeSimulationState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "control.proto",
}
